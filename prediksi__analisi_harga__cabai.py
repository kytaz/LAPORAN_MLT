# -*- coding: utf-8 -*-
"""Prediksi _Analisi_Harga _Cabai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b5c2sTem46_1KaIpTNc6zbtTd2tmvNxM

### PREDIKSI HARGA CABAI

- **Nama:** Tazky Khumaira Tsany
- **Email:**   mc589d5x2489@student.devacademy.id
- **ID Dicoding:** MC589D5X2489


Pada prediksi harga cabai ini,saya menggunakan data harga cabai dengan Dataset yang terdiri dari 500 baris dan 2 kolom, yang mencakup dua variabel: satu yang mewakili waktu (seperti tanggal atau periode) dan satu lagi yang menunjukkan harga cabai.
"""

!pip install keras_preprocessing

"""### Import Library"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# Untuk model
from statsmodels.tsa.arima.model import ARIMA
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV

"""### Load Data dan Explorasi Data"""

# Load the dataset
file_path = '/content/dataset.csv'
data = pd.read_csv(file_path)

# Convert 'date' column to datetime format
data['date'] = pd.to_datetime(data['date'], format='%d-%m-%y')
# Preview the first few rows of the dataset
data.head()

"""### Visualisasi Data"""

# Visualize the data
plt.figure(figsize=(10,6))
plt.plot(data['date'], data['value'], label='Harga Cabai', color='blue')
plt.title('Fluktuasi Harga Cabai dari Waktu ke Waktu')
plt.xlabel('Tanggal')
plt.ylabel('Harga Cabai')
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

"""### Data Preparation

Membagi kumpulan data menjadi data pelatihan dan pengujian
"""

# Split the dataset into training and testing data
train_size = int(len(data) * 0.8)
train, test = data[:train_size], data[train_size:]

# Use the 'value' column as the target variable (dependent variable)
X_train = np.array(range(len(train))).reshape(-1, 1)  # Dummy independent variable (time step)
y_train = train['value']

X_test = np.array(range(len(train), len(data))).reshape(-1, 1)
y_test = test['value']

"""Mengatur 'tanggal' sebagai indeks"""

if 'date' in data.columns:
    data.set_index('date', inplace=True)

display(data.head())

"""Mengatur frekuensi ke harian"""

data = data.asfreq('D')

display(data.head())

"""Menangani nilai yang hilang"""

# Handle missing values (NaNs)
data['value'] = data['value'].interpolate(method='linear')

display(data.head())

"""## Membangun dan Melatih Model ARIMA

Membagi data menjadi set pelatihan dan penguji
"""

train_size = int(len(data) * 0.8)
train, test = data[:train_size], data[train_size:]

display(train.head())  # Menampilkan beberapa baris pertama dari data pelatihan
display(test.head())   # Menampilkan beberapa baris pertama dari data pengujian

"""Membangun dan melatih model ARIMA"""

arima_model = ARIMA(train['value'], order=(5, 1, 0))  # ARIMA(p,d,q)
arima_model_fit = arima_model.fit()

print(arima_model_fit.summary())  # Menampilkan ringkasan model

"""Membuat prediksi dan mengevaluasi model"""

# Membuat prediksi menggunakan model ARIMA (perkiraan untuk panjang set pengujian)
arima_pred = arima_model_fit.forecast(steps=len(test))

# Mengevaluasi model ARIMA
mae_arima = mean_absolute_error(test['value'], arima_pred)
rmse_arima = np.sqrt(mean_squared_error(test['value'], arima_pred))
r2_arima = r2_score(test['value'], arima_pred)

print(f"MAE Model ARIMA: {mae_arima}")
print(f"RMSE Model ARIMA: {rmse_arima}")
print(f"R2 Model ARIMA: {r2_arima}")

"""### Membangun dan Melatih Model Random Forest

Persiapan data untuk Random Forest
"""

# Membuat kolom 'date_num' untuk merepresentasikan waktu sebagai angka
train.loc[:, 'date_num'] = np.arange(len(train))
test.loc[:, 'date_num'] = np.arange(len(train), len(data))

display(train.head()) # Menampilkan data train
display(test.head()) # Menampilkan data test

"""Mendefinisikan hyperparameter dan GridSearchCV"""

# Mendefinisikan rentang hyperparameter untuk GridSearchCV
param_grid = {
    'n_estimators': [50, 100, 150],
    'max_depth': [10, 20, 30],
    'min_samples_split': [2, 5, 10]
}

# Membuat model Random Forest dan melakukan GridSearchCV
rf_grid = GridSearchCV(RandomForestRegressor(random_state=42), param_grid, cv=5, scoring='neg_mean_squared_error')

"""Melatih model Random Forest"""

# Melatih model menggunakan data pelatihan dan kolom 'date_num' sebagai fitur
rf_grid.fit(train[['date_num']], train['value'])
# Ensure 'value' column exists in train DataFrame
if 'value' in train.columns:
    rf_grid.fit(train[['date_num']], train['value'])
else:
    # If 'value' is missing, try using original data
    rf_grid.fit(data[['date_num']], data['value'])

"""Membuat prediksi dan mengevaluasi model"""

# Membuat prediksi pada data pengujian
rf_pred = rf_grid.best_estimator_.predict(test[['date_num']])

# Mengevaluasi model Random Forest
mae_rf = mean_absolute_error(test['value'], rf_pred)
rmse_rf = np.sqrt(mean_squared_error(test['value'], rf_pred))
r2_rf = r2_score(test['value'], rf_pred)

print(f"MAE Model Random Forest: {mae_rf}") # Menampilkan MAE
print(f"RMSE Model Random Forest: {rmse_rf}") # Menampilkan RMSE
print(f"R2 Model Random Forest: {r2_rf}") # Menampilkan R-squared

"""### Visualisasi Perbandingan Model"""

# Plot the actual vs predicted values for both models
plt.figure(figsize=(10,6))

# Actual prices
plt.plot(test.index, test['value'], label='Actual Prices', color='black')

# ARIMA predictions
plt.plot(test.index, arima_pred, label='ARIMA Predictions', color='blue')

# Random Forest predictions
plt.plot(test.index, rf_pred, label='Random Forest Predictions', color='green')

plt.title('Perbandingan Prediksi Harga Cabai: ARIMA vs Random Forest')
plt.xlabel('Tanggal')
plt.ylabel('Harga Cabai')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

"""### Menyimpan File"""

import pandas as pd
from google.colab import files

# Before creating predictions_df:
y_test = test['value']  # Re-assign y_test to match the current test DataFrame

# Save the predictions to a CSV file
predictions_df = pd.DataFrame({
    'Date': test.index,  # Use the full date index of the test DataFrame
    'Actual Prices': y_test,
    'ARIMA Predictions': arima_pred,
    'Random Forest Predictions': rf_pred
})

# Save the DataFrame to a CSV file
predictions_df.to_csv('/content/hasilpredictions.csv', index=False)


# Download the CSV file
files.download('/content/hasilpredictions.csv')